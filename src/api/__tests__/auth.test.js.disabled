import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'

// Mock các module trước khi import
vi.mock('axios', () => {
  return {
    default: {
      create: vi.fn(() => ({
        interceptors: {
          request: { use: vi.fn() },
          response: { use: vi.fn() },
        },
      })),
      post: vi.fn(),
    },
    post: vi.fn(),
  }
})

// Mock config module
vi.mock('../config', () => ({
  getApiUrl: vi.fn().mockReturnValue('http://localhost:8888'),
  api: {
    get: vi.fn(),
    post: vi.fn(),
    put: vi.fn(),
  },
}))

// Import sau khi đã mock
import * as auth from '../auth'
import axios from 'axios'
import { getApiUrl } from '../config'

// Helper to mock localStorage
const localStorageMock = (() => {
  let store = {}
  return {
    getItem: vi.fn((key) => store[key] || null),
    setItem: vi.fn((key, value) => {
      store[key] = value
    }),
    removeItem: vi.fn((key) => {
      delete store[key]
    }),
    clear: vi.fn(() => {
      store = {}
    }),
  }
})()

global.localStorage = localStorageMock

describe('auth.js', () => {
  describe('login (mock)', () => {
    beforeEach(() => {
      vi.resetAllMocks()
      localStorage.clear()
      vi.stubEnv('VITE_USE_MOCK', 'true')
    })

    afterEach(() => {
      vi.unstubAllEnvs()
    })

    it('throws if username is missing', async () => {
      await expect(auth.login('', 'password123')).rejects.toThrow('Tên đăng nhập là bắt buộc')
    })

    it('throws if password is missing', async () => {
      await expect(auth.login('test_user', '')).rejects.toThrow('Mật khẩu là bắt buộc')
    })

    it('throws if credentials are wrong', async () => {
      await expect(auth.login('wrong', 'wrong')).rejects.toThrow(
        'Tên đăng nhập hoặc mật khẩu không đúng',
      )
    })

    it('returns token if credentials are correct', async () => {
      const token = await auth.login('test_user', 'password123')
      expect(token).toMatch(/^mock_token_/)
      expect(localStorage.getItem).toHaveBeenCalledWith('token')
      expect(localStorage.setItem).toHaveBeenCalled()
    })
  })

  describe('login (real API)', () => {
    beforeEach(() => {
      vi.resetAllMocks()
      localStorage.clear()
      vi.stubEnv('VITE_USE_MOCK', 'false')
    })

    afterEach(() => {
      vi.unstubAllEnvs()
    })

    it('returns access_token on success', async () => {
      const mockToken = 'real_token_123'
      axios.post.mockResolvedValueOnce({ data: { access_token: mockToken } })
      getApiUrl.mockReturnValue('http://api')

      const token = await auth.login('user', 'pass')

      expect(token).toBe(mockToken)
      expect(axios.post).toHaveBeenCalledWith(
        'http://api/token',
        expect.anything(),
        expect.anything(),
      )
    })

    it('throws with correct message on 401', async () => {
      const error = new Error('401')
      error.response = { status: 401, data: { detail: 'Invalid' } }
      axios.post.mockRejectedValueOnce(error)
      getApiUrl.mockReturnValue('http://api')

      await expect(auth.login('user', 'wrong')).rejects.toThrow(
        'Tên đăng nhập hoặc mật khẩu không đúng',
      )
    })

    it('throws with correct message on 422 username', async () => {
      const error = new Error('422')
      error.response = {
        status: 422,
        data: { detail: [{ loc: ['body', 'username'], msg: 'required' }] },
      }
      axios.post.mockRejectedValueOnce(error)
      getApiUrl.mockReturnValue('http://api')

      await expect(auth.login('', 'pass')).rejects.toThrow('Tên đăng nhập là bắt buộc')
    })

    it('throws with correct message on 422 password', async () => {
      const error = new Error('422')
      error.response = {
        status: 422,
        data: { detail: [{ loc: ['body', 'password'], msg: 'required' }] },
      }
      axios.post.mockRejectedValueOnce(error)
      getApiUrl.mockReturnValue('http://api')

      await expect(auth.login('user', '')).rejects.toThrow('Mật khẩu là bắt buộc')
    })
  })

  describe('register', () => {
    beforeEach(() => {
      vi.resetAllMocks()
      vi.stubEnv('VITE_USE_MOCK', 'true')
    })

    afterEach(() => {
      vi.unstubAllEnvs()
    })

    it('returns mock user when USE_MOCK', async () => {
      const userData = { username: 'abc', email: 'a@b.c' }

      const res = await auth.register(userData)

      expect(res.success).toBe(true)
      expect(res.user.username).toBe('abc')
    })

    it('calls api.post and returns data when not mock', async () => {
      vi.stubEnv('VITE_USE_MOCK', 'false')
      const userData = { username: 'abc', email: 'a@b.c' }
      const mockRes = { data: { id: 2, ...userData } }

      // Assign a mock implementation for this test
      const mockPost = vi.fn().mockResolvedValueOnce(mockRes)
      const originalApi = auth.api
      auth.api = { post: mockPost }

      const res = await auth.register(userData)

      expect(res).toEqual(mockRes.data)
      expect(mockPost).toHaveBeenCalledWith('/register', userData)

      // Restore original
      auth.api = originalApi
    })
  })

  describe('getCurrentUser', () => {
    beforeEach(() => {
      vi.resetAllMocks()
      localStorage.clear()
      vi.stubEnv('VITE_USE_MOCK', 'true')
    })

    afterEach(() => {
      vi.unstubAllEnvs()
    })

    it('returns mock user if token exists', async () => {
      localStorage.getItem.mockReturnValue('mock_token_abc')

      const user = await auth.getCurrentUser()

      expect(user).toHaveProperty('username', 'testuser')
    })

    it('throws if no token', async () => {
      localStorage.getItem.mockReturnValue(null)

      await expect(auth.getCurrentUser()).rejects.toThrow('Unauthorized')
    })

    it('calls api.get and returns data when not mock', async () => {
      vi.stubEnv('VITE_USE_MOCK', 'false')
      localStorage.getItem.mockReturnValue('token')

      const mockRes = { data: { id: 1, username: 'real' } }
      const mockGet = vi.fn().mockResolvedValueOnce(mockRes)

      // Temporarily replace api
      const originalApi = auth.api
      auth.api = { get: mockGet }

      const user = await auth.getCurrentUser()

      expect(user).toEqual(mockRes.data)
      expect(mockGet).toHaveBeenCalledWith('/users/me')

      // Restore original
      auth.api = originalApi
    })
  })

  describe('updateMSV', () => {
    it('calls api.post and returns data', async () => {
      const mockRes = { data: { msv: 'CT123' } }
      auth.api = { post: vi.fn().mockResolvedValueOnce(mockRes) }
      const res = await auth.updateMSV('CT123')
      expect(res).toEqual(mockRes.data)
      expect(auth.api.post).toHaveBeenCalledWith('/add-msv', { msv: 'CT123' })
    })
    it('throws error on api error', async () => {
      const error = { response: { data: { msg: 'fail' } } }
      auth.api = { post: vi.fn().mockRejectedValueOnce(error) }
      await expect(auth.updateMSV('CT123')).rejects.toEqual(error.response.data)
    })
  })

  describe('uploadAvatar', () => {
    it('calls api.post and returns data', async () => {
      const mockRes = { data: { avatar: 'url' } }
      auth.api = { post: vi.fn().mockResolvedValueOnce(mockRes) }
      const formData = new FormData()
      const res = await auth.uploadAvatar(formData)
      expect(res).toEqual(mockRes.data)
      expect(auth.api.post).toHaveBeenCalledWith('/upload-avatar', formData, expect.any(Object))
    })
    it('throws error on api error', async () => {
      const error = { response: { data: { msg: 'fail' } } }
      auth.api = { post: vi.fn().mockRejectedValueOnce(error) }
      const formData = new FormData()
      await expect(auth.uploadAvatar(formData)).rejects.toEqual(error.response.data)
    })
  })

  describe('changePassword', () => {
    it('calls api.put and returns data', async () => {
      const mockRes = { data: { ok: true } }
      auth.api = { put: vi.fn().mockResolvedValueOnce(mockRes) }
      const res = await auth.changePassword('old', 'new')
      expect(res).toEqual(mockRes.data)
      expect(auth.api.put).toHaveBeenCalledWith('/change-password', {
        old_password: 'old',
        new_password: 'new',
      })
    })
    it('throws error on api error', async () => {
      const error = { response: { data: { msg: 'fail' } } }
      auth.api = { put: vi.fn().mockRejectedValueOnce(error) }
      await expect(auth.changePassword('old', 'new')).rejects.toEqual(error.response.data)
    })
  })
})
